#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    printf "${!1}%s${NC}\n" "$2"
}

# Function to create a file with content
create_file() {
    local file_path="$1"
    local content="$2"
    mkdir -p "$(dirname "$file_path")"
    echo "$content" > "$file_path"
    print_color "GREEN" "Created: $file_path"
}

print_color "YELLOW" "Setting up TWA SDK project..."

# Create project structure
mkdir -p src tests

# Create package.json
create_file "package.json" '{
  "name": "@teledeveloperz/twa-sdk",
  "version": "1.0.0",
  "description": "Enhanced Telegram Web Apps (TWA) SDK on TypeScript",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "scripts": {
    "build": "tsc",
    "test": "jest",
    "lint": "eslint src tests",
    "format": "prettier --write \"src/**/*.ts\" \"tests/**/*.ts\"",
    "prepare": "husky install",
    "prepublishOnly": "npm run build"
  },
  "keywords": ["telegram", "web", "apps", "sdk", "twa"],
  "author": "TeleDeveloperz",
  "license": "MIT",
  "devDependencies": {
    "@types/jest": "^27.0.0",
    "@typescript-eslint/eslint-plugin": "^5.0.0",
    "@typescript-eslint/parser": "^5.0.0",
    "eslint": "^8.0.0",
    "husky": "^7.0.0",
    "jest": "^27.0.0",
    "lint-staged": "^11.0.0",
    "prettier": "^2.0.0",
    "ts-jest": "^27.0.0",
    "typescript": "^4.5.0"
  },
  "dependencies": {
    "axios": "^0.24.0",
    "dotenv": "^10.0.0"
  },
  "lint-staged": {
    "*.ts": [
      "eslint --fix",
      "prettier --write"
    ]
  }
}'

# Create tsconfig.json
create_file "tsconfig.json" '{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "declaration": true,
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true
  },
  "include": ["src"],
  "exclude": ["node_modules", "**/*.test.ts"]
}'

# Create .gitignore
create_file ".gitignore" 'node_modules/
dist/
coverage/
.env
.DS_Store
*.log'

# Create .env
create_file ".env" 'BOT_TOKEN=your_bot_token_here'

# Create src/types.ts
create_file "src/types.ts" 'export interface User {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  is_premium?: boolean;
  account_age_days?: number;
}

export interface WebAppInitData {
  query_id?: string;
  user?: User;
  auth_date: number;
  hash: string;
}

export interface WebAppInfo {
  initData: WebAppInitData;
}'

# Create src/user.ts
create_file "src/user.ts" 'import { User, WebAppInfo } from "./types";
import { calculateAccountAge } from "./utils";

export class TelegramUser {
  private user: User;

  constructor(webAppInfo: WebAppInfo) {
    this.user = webAppInfo.initData.user || {} as User;
  }

  public getId(): number {
    return this.user.id;
  }

  public getUsername(): string | undefined {
    return this.user.username;
  }

  public getFullName(): string {
    return `${this.user.first_name} ${this.user.last_name || ""}`.trim();
  }

  public getLanguageCode(): string | undefined {
    return this.user.language_code;
  }

  public isPremium(): boolean {
    return this.user.is_premium || false;
  }

  public getAccountAge(): number {
    return calculateAccountAge(this.user.id);
  }
}'

# Create src/api.ts
create_file "src/api.ts" 'import axios from "axios";
import dotenv from "dotenv";

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const API_BASE_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

export async function getMe() {
  try {
    const response = await axios.get(`${API_BASE_URL}/getMe`);
    return response.data.result;
  } catch (error) {
    console.error("Error fetching bot info:", error);
    throw error;
  }
}

export async function getUserProfilePhotos(userId: number) {
  try {
    const response = await axios.get(`${API_BASE_URL}/getUserProfilePhotos`, {
      params: { user_id: userId }
    });
    return response.data.result;
  } catch (error) {
    console.error("Error fetching user profile photos:", error);
    throw error;
  }
}'

# Create src/utils.ts
create_file "src/utils.ts" 'export function calculateAccountAge(userId: number): number {
  const creationDate = new Date(2013, 0, 1);
  const msPerDay = 24 * 60 * 60 * 1000;
  return Math.floor((Date.now() - creationDate.getTime()) / msPerDay);
}

export function validateInitData(initData: string): boolean {
  // TODO: Implement proper validation logic
  return true;
}'

# Create src/index.ts
create_file "src/index.ts" 'export * from "./types";
export * from "./user";
export * from "./api";
export * from "./utils";

import { WebAppInfo } from "./types";
import { TelegramUser } from "./user";
import * as api from "./api";
import * as utils from "./utils";

export class TWASDK {
  private webAppInfo: WebAppInfo;
  public user: TelegramUser;

  constructor(initData: string) {
    if (!utils.validateInitData(initData)) {
      throw new Error("Invalid init data");
    }
    this.webAppInfo = JSON.parse(decodeURIComponent(initData)) as WebAppInfo;
    this.user = new TelegramUser(this.webAppInfo);
  }

  public async getBotInfo() {
    return api.getMe();
  }

  public async getUserProfilePhotos(userId: number) {
    return api.getUserProfilePhotos(userId);
  }
}'

# Create tests/user.test.ts
create_file "tests/user.test.ts" 'import { TWASDK } from "../src";

describe("TWASDK User", () => {
  const mockInitData = encodeURIComponent(JSON.stringify({
    initData: {
      user: {
        id: 123456789,
        first_name: "John",
        last_name: "Doe",
        username: "johndoe",
        language_code: "en",
        is_premium: true
      },
      auth_date: Date.now(),
      hash: "mock_hash"
    }
  }));

  const sdk = new TWASDK(mockInitData);

  test("User ID is correct", () => {
    expect(sdk.user.getId()).toBe(123456789);
  });

  test("Username is correct", () => {
    expect(sdk.user.getUsername()).toBe("johndoe");
  });

  test("Full name is correct", () => {
    expect(sdk.user.getFullName()).toBe("John Doe");
  });

  test("Language code is correct", () => {
    expect(sdk.user.getLanguageCode()).toBe("en");
  });

  test("Premium status is correct", () => {
    expect(sdk.user.isPremium()).toBe(true);
  });

  test("Account age is a number", () => {
    expect(typeof sdk.user.getAccountAge()).toBe("number");
  });
});'

# Create README.md
create_file "README.md" '# Telegram Web Apps (TWA) SDK

[![npm version](https://img.shields.io/npm/v/@teledeveloperz/twa-sdk.svg)](https://www.npmjs.com/package/@teledeveloperz/twa-sdk)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

An enhanced TypeScript SDK for Telegram Web Apps (TWA), providing easy access to user data and Telegram Bot API functionality.

## Features

- TypeScript support for better developer experience
- Easy access to TWA user data
- Integration with Telegram Bot API
- Utility functions for common TWA operations

## Installation

```bash
npm install @teledeveloperz/twa-sdk
```

## Usage

```typescript
import { TWASDK } from "@teledeveloperz/twa-sdk";

// Initialize the SDK with the TWA init data
const sdk = new TWASDK(window.Telegram.WebApp.initData);

// Access user information
console.log(sdk.user.getFullName());

// Make API calls
sdk.getBotInfo().then(botInfo => {
  console.log("Bot info:", botInfo);
});
```

## API Reference

### TWASDK

The main class for interacting with the TWA SDK.

#### Constructor

```typescript
new TWASDK(initData: string)
```

- `initData`: The initialization data provided by Telegram Web App.

#### Properties

- `user`: An instance of `TelegramUser` containing user information.

#### Methods

- `getBotInfo()`: Fetches information about the bot.
- `getUserProfilePhotos(userId: number)`: Fetches profile photos for a given user ID.

### TelegramUser

A class representing the Telegram user.

#### Methods

- `getId()`: Returns the user's Telegram ID.
- `getUsername()`: Returns the user's username, if available.
- `getFullName()`: Returns the user's full name.
- `getLanguageCode()`: Returns the user's language code.
- `isPremium()`: Returns whether the user has Telegram Premium.
- `getAccountAge()`: Returns an estimate of the account age in days.

## Development

To set up the project for development:

1. Clone the repository
2. Install dependencies: `npm install`
3. Build the project: `npm run build`
4. Run tests: `npm test`

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.'

# Create .eslintrc.json
create_file ".eslintrc.json" '{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "rules": {
    "indent": ["error", 2],
    "linebreak-style": ["error", "unix"],
    "quotes": ["error", "double"],
    "semi": ["error", "always"]
  }
}'

# Create .prettierrc
create_file ".prettierrc" '{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": false,
  "printWidth": 100,
  "tabWidth": 2
}'

# Initialize Git repository
git init
git add .
git commit -m "Initial commit"

# Install dependencies
npm install

# Set up Husky
npx husky install
npx husky add .husky/pre-commit "npx lint-staged"

print_color "GREEN" "TWA SDK project setup complete!"
print_color "YELLOW" "Next steps:"
echo "1. Review and update the README.md file"
echo "2. Update the .env file with your actual bot token"
echo "3. Implement proper initData validation in src/utils.ts"
echo "4. Add more API methods and tests as needed"
echo "5. Run 'npm run build' to build the project"
echo "6. Run 'npm test' to run the tests"