"use strict";var e=require("zod"),t=require("@privy-io/api-base"),a=require("../api.js"),i=require("../core.js"),o=require("./export.js");require("bs58"),require("libphonenumber-js/max"),require("viem");const r=e.z.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'");let n=e.z.object({address:i.SolanaWalletAddress.optional(),chain_type:e.z.literal("solana").optional()}),s=e.z.object({address:i.WalletAddress.optional(),chain_type:e.z.literal("ethereum").optional()});const l=e.z.enum(["root","manager","delegated-actions"]).nullable(),p=e.z.object({method:e.z.literal("signTransaction"),params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")})}).merge(n),d=e.z.object({method:e.z.literal("signAndSendTransaction"),caip2:r,params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")})}).merge(n),z=e.z.object({method:e.z.literal("signMessage"),params:e.z.object({message:e.z.string(),encoding:e.z.literal("base64")})}).merge(n);let c=e.z.string().startsWith("0x"),h=e.z.union([c,e.z.number()]);const u=e.z.object({from:i.WalletAddress.optional(),to:i.WalletAddress.optional(),chain_id:h.optional(),nonce:h.optional(),data:c.optional(),value:h.optional(),type:e.z.union([e.z.literal(0),e.z.literal(1),e.z.literal(2)]).optional(),gas_limit:h.optional(),gas_price:h.optional(),max_fee_per_gas:h.optional(),max_priority_fee_per_gas:h.optional()}),g=e.z.object({method:e.z.literal("eth_signTransaction"),params:e.z.object({transaction:u})}).merge(s),m=e.z.object({method:e.z.literal("eth_sendTransaction"),caip2:r,params:e.z.object({transaction:u})}).merge(s),_=e.z.object({message:e.z.string(),encoding:e.z.union([e.z.literal("utf-8"),e.z.literal("hex")])}),b=e.z.object({method:e.z.literal("personal_sign"),params:_}).merge(s),y=e.z.record(e.z.string(),e.z.any()),x=e.z.object({name:e.z.string(),version:e.z.string(),chainId:e.z.number(),verifyingContract:e.z.string()}).merge(e.z.object({}).catchall(e.z.any()));let j=e=>e.replace(/_([a-z])/g,((e,t)=>t.toUpperCase()));const A=e.z.union([x,y]).transform((e=>{let t={};for(let[a,i]of Object.entries(e))["chain_id","verifying_contract"].includes(a)&&(t[j(a)]=i);return t})),I=e.z.record(e.z.array(e.z.object({name:e.z.string(),type:e.z.string()}))),v=e.z.object({method:e.z.literal("eth_signTypedData_v4"),params:e.z.object({typed_data:e.z.object({domain:A,types:I,message:e.z.record(e.z.string(),e.z.any()),primary_type:e.z.string()})})}).merge(s),R=e.z.object({address:e.z.string(),method:e.z.literal("exportPrivateKey"),params:o.PrivateKeyExportInput}),W=e.z.discriminatedUnion("method",[g,m,b,v]),S=e.z.discriminatedUnion("method",[p,d,z]),T=e.z.union([W,S,R]),f=e.z.object({method:e.z.literal("signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("base64")})}),P=e.z.object({method:e.z.literal("signAndSendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:r}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),D=e.z.object({method:e.z.literal("signMessage"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("base64")})}),E=e.z.object({method:e.z.literal("eth_signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("rlp")})}),k=e.z.object({method:e.z.literal("eth_sendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:r}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),w=e.z.object({method:e.z.literal("personal_sign"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),K=e.z.object({method:e.z.literal("eth_signTypedData_v4"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),C=e.z.object({method:e.z.literal("exportPrivateKey"),data:o.PrivateKeyExportInput}),q=e.z.discriminatedUnion("method",[f,P,D,E,k,w,K,C]),O=e.z.object({display_name:e.z.string().optional(),public_key:e.z.string(),role:l.optional()});let U=e.z.union([e.z.literal("solana"),e.z.literal("ethereum")]);const M=e.z.object({id:e.z.string(),address:e.z.string(),created_at:e.z.number(),chain_type:U,policy_ids:e.z.array(e.z.string()),authorization_threshold:e.z.number().optional(),additional_signers:e.z.array(e.z.object({signer_id:e.z.string().cuid2()})),owner_id:e.z.string().cuid2().nullable()}),L=e.z.string().cuid2(),F=e.z.string(),N=e.z.object({public_key:F}),V={owner:N.nullable().optional(),owner_id:L.nullable().optional()},Q=e.z.object({chain_type:U,policy_ids:e.z.array(e.z.string()).max(1).optional(),authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:e.z.array(e.z.object({signer_id:e.z.string().cuid2()})).optional(),...V}).refine((e=>{let t=void 0!==e.authorization_key_ids||void 0!==e.authorization_threshold,a=void 0!==e.additional_signers;return!t||!a}),"Please provide either additional_signers or authorization_key_ids, not both").refine((e=>void 0===e.authorization_threshold||e.authorization_threshold>=1&&e.authorization_key_ids&&e.authorization_threshold<=e.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((e=>{throw new t.InvalidInputError(e.error.message,t.PrivyErrorCode.INVALID_DATA)})),Z=e.z.object({id:e.z.string(),chain_type:U,address:e.z.string(),authorization_threshold:e.z.number().optional()}),$=e.z.object({wallet_id:e.z.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t.InvalidInputError(e.message,t.PrivyErrorCode.INVALID_DATA)})),B=e.z.object({id:e.z.string()}),G=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),role:l,created_at:e.z.number()}),H=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),created_at:e.z.number()}),J=a.Pagination.extend({chain_type:U.optional()}),X=e.z.object({policy_ids:e.z.array(e.z.string()).max(1,"Only one policy ID can be set").optional(),authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==e.authorization_threshold&&0!==e.authorization_threshold&&(e.authorization_threshold<0&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===e.authorization_key_ids&&t.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),e.authorization_key_ids&&e.authorization_threshold>e.authorization_key_ids.length&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))}));exports.AuthorizationKeyDashboardResponse=G,exports.AuthorizationKeyResponse=H,exports.AuthorizationKeyRole=l,exports.CAIP2=r,exports.CurrentTypedDataDomainInputParams=x,exports.KeyQuorumId=L,exports.LegacyTypedDataDomainInputParams=y,exports.OwnerInput=N,exports.OwnerInputFields=V,exports.P256PublicKey=F,exports.TypedDataDomainInputParams=A,exports.TypedDataTypesInputParams=I,exports.UnsignedEthereumTransaction=u,exports.WalletApiCreateInput=Q,exports.WalletApiCreateResponse=Z,exports.WalletApiEthereumPersonalSignRpcInput=b,exports.WalletApiEthereumPersonalSignRpcInputParams=_,exports.WalletApiEthereumPersonalSignRpcResponse=w,exports.WalletApiEthereumRpcInput=W,exports.WalletApiEthereumSendTransactionRpcInput=m,exports.WalletApiEthereumSendTransactionRpcResponse=k,exports.WalletApiEthereumSignTransactionRpcInput=g,exports.WalletApiEthereumSignTransactionRpcResponse=E,exports.WalletApiEthereumSignTypedDataRpcInput=v,exports.WalletApiEthereumSignTypedDataRpcResponse=K,exports.WalletApiExportPrivateKeyRpcInput=R,exports.WalletApiExportPrivateKeyRpcResponse=C,exports.WalletApiRegisterAuthorizationKeyInput=O,exports.WalletApiRevokeAuthorizationKeyInput=B,exports.WalletApiRpcInput=T,exports.WalletApiRpcResponse=q,exports.WalletApiSolanaRpcInput=S,exports.WalletApiSolanaSignAndSendTransactionRpcInput=d,exports.WalletApiSolanaSignAndSendTransactionRpcResponse=P,exports.WalletApiSolanaSignMessageRpcInput=z,exports.WalletApiSolanaSignMessageRpcResponse=D,exports.WalletApiSolanaSignTransactionRpcInput=p,exports.WalletApiSolanaSignTransactionRpcResponse=f,exports.WalletIdFromPath=$,exports.WalletResponse=M,exports.WalletUpdateInput=X,exports.WalletsSearchInput=J;
